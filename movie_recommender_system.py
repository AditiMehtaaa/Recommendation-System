# -*- coding: utf-8 -*-
"""Movie_Recommender_System.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bo0ZExmecC4ekNOwA-UqAoRWQCUrhm9l
"""

pip install scikit-surprise

import pandas as pd
from surprise import Dataset, Reader, SVD

"""**Data Collection**"""

movie_title = pd.read_csv('Movie_Id_Titles.csv')
movie_ratings = pd.read_csv('Dataset.csv')

movie_title

movie_ratings

"""**Exploratory Data Analysis**"""

# For Movies title
movie_title.head()

movie_title.tail()

movie_title.info()

# For Movies Ratings
movie_ratings.tail()

movie_ratings.head()

movie_ratings.info()

movie_ratings.describe()

"""Combine two Dataset"""

movie_ratings = pd.merge(movie_ratings, movie_title, on = 'item_id')

movie_ratings.head(15)

movie_ratings.describe()

"""**Data Preprocessing**"""

movie_ratings.drop('timestamp', axis=1, inplace=True)

movie_ratings.head()

ndataset = movie_ratings.groupby('title')['rating'].describe()

ndataset

ndataset = ndataset.reset_index()

ndataset.head()

ndataset = ndataset[['title', 'count']]

ndataset.head()

ndataset.sort_values('count', ascending=False)

"""**Modelling**"""

movie_matrix = movie_ratings.pivot_table(index = 'user_id', columns = 'title', values = 'rating', fill_value=0)

movie_matrix.head()

x_star_wars = movie_matrix['Star Wars (1977)']
x_liar_liar = movie_matrix['Liar Liar (1997)']
x_liar_liar.head()

x_star_wars.head()

similar_to_star_wars = pd.DataFrame(movie_matrix.corrwith(x_star_wars), columns=['Correlation value']) #sci-fi movie
similar_to_liar_liar = pd.DataFrame(movie_matrix.corrwith(x_liar_liar), columns=['Correlation value']) #comedy movie

similar_to_star_wars.head()

similar_to_star_wars.dropna(inplace=True)

similar_to_star_wars.head()

similar_to_star_wars = pd.merge(similar_to_star_wars, ndataset, on = 'title')

similar_to_star_wars.head()

similar_to_star_wars = similar_to_star_wars.sort_values('Correlation value', ascending = False)

similar_to_star_wars.head()

sm= similar_to_star_wars[similar_to_star_wars['count']>=100]

movie_ratings = pd.merge(movie_ratings, similar_to_star_wars, on='title')

movie_ratings

"""**Collaborative Filtering**"""

import numpy as np
from surprise import KNNBasic
from surprise.model_selection import train_test_split
from surprise import accuracy

# create a surprise Dataset
reader = Reader (rating_scale = (1, 5))
data = Dataset.load_from_df(movie_ratings[['user_id', 'item_id', 'rating']], reader)

data

# split the data into training and test data sets
trainset, testset = train_test_split(data, test_size=0.2)

trainset

#Build a user-based Collaborative filtering model using K-nearest Neighbors
sim_options = {
    'name': 'cosine', # Use cosine similarity
    'user_based': True,
    'k' : 20  # User-based collaborative filtering
}

sim_options

model = KNNBasic(sim_options = sim_options)

# Train the model on the training data
model.fit(trainset)

# Make predictions on the test set
predictions = model.test(testset)

# Evaluate the model using RMSE (Root Mean Squared Error)
rmse = accuracy.rmse(predictions)
mae = accuracy.mae(predictions)
print(f'RMSE: {rmse:.2f}')
print(f'MAE: {mae:.2f}')

# Recommend movies for a specific user
target_user = '27'

# Identify all unique movie Ids in the dataset
unique_movie_ids = set(movie_ratings['item_id'])

# Get the list of movies that the user has already rated
movies_rated_by_user = movie_ratings[movie_ratings['user_id'] == target_user]['item_id'].tolist()

unseen_movies = list(unique_movie_ids - set(movies_rated_by_user))

import random
random.shuffle(unseen_movies)

# Predict ratings for unseen movies
predictions = []
for movie_id in unseen_movies:
    prediction = model.predict(target_user, movie_id)
    predictions.append((movie_id, prediction.est))

# Sort the predictions by estimated rating in descending order
predictions.sort(key=lambda x: x[1], reverse=True)

# Get the top N movie recommendations
top_n = 5
recommended_movies = predictions[:top_n]

print(f"Top {top_n} movie recommendations for User {target_user}:")
for movie_id, estimated_rating in recommended_movies:
    movie_title = movie_ratings[movie_ratings['item_id'] == movie_id]['title'].values[0]
    print(movie_title)
    print(f'Movie ID: {movie_id}, Estimated Rating: {estimated_rating:.2f}')

